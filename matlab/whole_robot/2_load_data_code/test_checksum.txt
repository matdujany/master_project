/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
C#, VB, Perl, Swift, Prolog, Javascript, Pascal, HTML, CSS, JS
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

#define BUFFER_SIZE 512
#define SENSOR_DATA_LENGTH       13  
#define IMU_DATA_LENGTH       25  

typedef struct rbuffer
// Contains load cell and IMU data and some related variables
{
  unsigned int head;                                                                      // 16 bit
  unsigned int tail;                                                                      // 16 bit
  unsigned char buffer[BUFFER_SIZE];                                                            // 8 bit unsigned
}
rbuffer;

rbuffer ser_rx_buf;
const unsigned char init_buffer_values[]={
0x3F, 0xDC, 0x6E, 0x37, 0x3F, 0x5E, 0xBC, 0xB2, 0x40, 0x7C, 0x31, 0x08, 0xC3, 0x3E, 0xB9, 0x89, 0x03, 0xBF, 0x9D, 0xF0, 0x85, 0x40, 0x9C, 0x00, 0x00, 0x40, 0x41, 0x00, 0x00, 0x40, 0xC0, 0x00, 0x00, 
0x62, 0x43, 0x00, 0x00, 0xB6, 0xC2, 0x00, 0x00, 0x34, 0xC2, 0x00, 0x00, 0x1E, 0x43, 0x60, 0x06, 0x55, 0xFF, 0xAA, 0x05, 0x01, 0x4D, 0x2F, 0x5B, 0xAB, 0xBF, 0xF0, 0x29, 0x66, 0xBF, 0xE5, 0xAF, 0x8D, 
0x40, 0x5A, 0x87, 0x4D, 0x7D, 0x3F, 0x02, 0x4F, 0x11, 0x3F, 0x19, 0x49, 0x69, 0x40, 0xCC, 0xF6, 0x31, 0x67, 0x3F, 0x3E, 0x71, 0x87, 0x3F, 0xA5, 0x38, 0xB6, 0x40, 0xA1, 0x37, 0x40, 0xE2, 0x3E, 0x3D, 
0x66, 0x10, 0xBF, 0xDE, 0x63, 0x85, 0x40, 0xC1, 0x00, 0x00, 0x30, 0x41, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x63, 0x43, 0x00, 0x00, 0xC2, 0xC2, 0x00, 0x00, 0x54, 0xC2, 0x00, 0x00, 0x32, 0x43, 0x60, 
0xC0, 0x55, 0xFF, 0xAA, 0x05, 0x01, 0x4D, 0x30, 0x0E, 0x8F, 0x3F, 0xD8, 0xAB, 0x39, 0xBF, 0x75, 0x25, 0x27, 0x40, 0x7F, 0x3A, 0xB6, 0x93, 0x3F, 0x1A, 0x84, 0x27, 0x3F, 0x32, 0xB2, 0xA6, 0x40, 0xF1, 
0xC9, 0x77, 0x83, 0x3F, 0x2A, 0x79, 0xAF, 0x3F, 0x26, 0xFF, 0xC0, 0x40, 0xC6, 0xF2, 0x4A, 0x06, 0x3F, 0x41, 0x05, 0x25, 0xBF, 0x15, 0x65, 0x87, 0x40, 0xE6, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 
0x41, 0x00, 0x00, 0x5A, 0x43, 0x00, 0x00, 0x8E, 0xC2, 0x00, 0x00, 0x88, 0xC2, 0x00, 0x00, 0xDC, 0x42, 0x60, 0x4E, 0x55, 0xFF, 0xAA, 0x05, 0x01, 0x4D, 0x3B, 0x39, 0x42, 0x3F, 0x80, 0x84, 0xDF, 0xBD, 
0xD8, 0x35, 0x52, 0x40, 0xA4, 0xFE, 0xAC, 0x43, 0xBF, 0x00, 0x75, 0xC4, 0x3D, 0x45, 0x59, 0x65, 0x40, 0x16, 0xB6, 0x86, 0x2C, 0x3F, 0x10, 0xB8, 0x88, 0x3E, 0x9C, 0xC3, 0xC4, 0x40, 0xEB, 0x20, 0x98, 
0xB3, 0xBE, 0x35, 0x6C, 0x84, 0x3D, 0xB9, 0xAC, 0x9C, 0x40, 0x17, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x8A, 0xAA, 0x05, 0x01, 0x4D, 0xC0, 0x55, 0xA4, 0xBD, 0x40, 0x0D, 0x97, 0xBD, 0x4C, 0x29, 0x9D, 
0x40, 0xC9, 0xD0, 0xB9, 0x55, 0xC1, 0x00, 0x00, 0xA0, 0x42, 0x60, 0x0D, 0x55, 0xFF, 0xAA, 0x05, 0x01, 0x4D, 0xE7, 0x96, 0xC3, 0xBF, 0xC0, 0x9E, 0x2C, 0xBF, 0x46, 0xE8, 0x95, 0x40, 0xEB, 0x13, 0xCB, 
0x7A, 0x3F, 0x0C, 0x8C, 0xDE, 0x3E, 0x6F, 0xE0, 0x62, 0x40, 0x5D, 0xFE, 0x46, 0x03, 0x3F, 0x10, 0x8D, 0xA0, 0x3E, 0x81, 0x25, 0xA9, 0x40, 0x32, 0x04, 0x7F, 0xB3, 0x3D, 0x34, 0x31, 0x80, 0xBE, 0xD1, 
0xF7, 0x90, 0x40, 0x52, 0x00, 0x00, 0x30, 0x41, 0x00, 0x00, 0x80, 0xC0, 0x00, 0x00, 0x61, 0x43, 0x00, 0x00, 0x82, 0xC2, 0x00, 0x00, 0x10, 0xC1, 0x00, 0x00, 0x82, 0x42, 0x60, 0x1F, 0x55, 0xFF, 0xAA, 
0x05, 0x01, 0x4D, 0x8D, 0x5E, 0xDF, 0xBF, 0x58, 0x62, 0x47, 0xBF, 0xA6, 0x46, 0x98, 0x40, 0x10, 0xCA, 0x1F, 0x80, 0x3F, 0x44, 0xD0, 0xE6, 0x3E, 0x53, 0xB1, 0x5A, 0x40, 0x82, 0x82, 0xF9, 0x1E, 0x3F, 
0xC8, 0xEA, 0xE1, 0x3E, 0x56, 0xAF, 0xAC, 0x40, 0x57, 0xF8, 0x64, 0x0E, 0x3E, 0x3C, 0x31, 0xA6, 0xBE, 0x9A, 0x3C, 0x8B, 0x40, 0x77, 0x00, 0x00, 0x60, 0x41, 0x00, 0x00, 0xA0, 0xC0, 0x00, 0x00, 0x61, 
0x43, 0x00, 0x00, 0xA4, 0xC2, 0x00, 0x00, 0xC8, 0xC1, 0x00, 0x00, 0xE0, 0x42, 0x60, 0xB5, 0x55, 0xFF, 0xAA, 0x05, 0x01, 0x4D, 0xAD, 0x12, 0xCA, 0xBF, 0x20, 0xCA, 0x5A, 0xBF, 0x70, 0x36, 0x96, 0x40, 
0x35, 0xDD, 0xA3, 0x7A, 0x3F, 0x6A, 0x3D, 0x06, 0x3F, 0xB1, 0x92, 0x5C, 0x40, 0xA7, 0xC2, 0x55, 0x40};

void init_buffer(){
    ser_rx_buf.head = 301;
    ser_rx_buf.tail = 218;
    for (int i=0; i<BUFFER_SIZE; i++){
        ser_rx_buf.buffer[i] = init_buffer_values[i] ;   
    }
}

void print_buffer()
{
  // Print contents of ring buffer
  for (int i = 0; i < BUFFER_SIZE; i++)
  {

    if (i == ser_rx_buf.head)
    {
      printf("h:");
    }
    if (i == ser_rx_buf.tail)
    {
      printf("t:");
    }

    printf("%d",ser_rx_buf.buffer[i]);
    printf(", ");
    if ((i + 1) % 33 == 0)
    {
      printf("\n");
    }
  }
}

int main()
{
    init_buffer();
    print_buffer();
    printf("\n");
    printf("\n");
  
    int i_data_start = (ser_rx_buf.tail + 5);
    int checksum_calc = 0;
    int checksum_frame = 0;
    if (ser_rx_buf.head==0){
    checksum_frame= ser_rx_buf.buffer[BUFFER_SIZE - 1];
    }
    else
    {
    checksum_frame=ser_rx_buf.buffer[ser_rx_buf.head - 1];
    }
    int i_lim;
    int count=0;

    // Total Data Length                                 // Index of start of data
    for (int i = i_data_start; i < (4 * SENSOR_DATA_LENGTH + IMU_DATA_LENGTH) + (5 + ser_rx_buf.tail); i++)
    {

    // Correct index in case i > BUFFER_SIZE
    i_lim = i & (BUFFER_SIZE - 1);
    
    
    checksum_calc += ser_rx_buf.buffer[i_lim];
    count++;
    }

    
    printf("Checksum calc ");
    printf("%d",checksum_calc);
    printf("\n");
    printf("Checksum frame ");
    printf("%d",checksum_frame);
    printf("\n");
    return 0;
}

